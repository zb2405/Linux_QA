---
- hosts: all
  become: 'yes'
  tasks:
    - pause:
        prompt: "Provide the Ticket Number"
        echo: yes
      register: prompt_ticket_no
    - set_fact:
        ticket_num: "{{ prompt_ticket_no.user_input }}"

    - pause:
        prompt: "Build by"
        echo: yes
      register: prompt_bld_by
    - set_fact:
        build_by: "{{ prompt_bld_by.user_input }}"


    - pause:
        prompt: "QA by"
        echo: yes
      register: prompt_qa_by
    - set_fact:
        qa_by: "{{ prompt_qa_by.user_input }}"

    - pause:
        prompt: "Server Type [virtual/physical]"
        echo: yes
      register: prompt_srv_type
    - set_fact:
        srv_type: "{{ prompt_srv_type.user_input }}"

    - pause:
        prompt: "Client name:"
        echo: yes
      register: prompt_client
    - set_fact:
        client_name: "{{ prompt_client.user_input }}"

    - pause:
        prompt: "Monitoring Agent [nqm/patrol]:"
        echo: yes
      register: prompt_mon
    - set_fact:
        mon_agt: "{{ prompt_mon.user_input }}"

    - pause:
        prompt: "RAID controller [hp/dell]:"
        echo: yes
      register: prompt_raid
      when: srv_type == 'physical'
    - set_fact:
        raid_ctrl: "{{ prompt_raid.user_input }}"    
      when: srv_type == 'physical'

    - name: Display user inputs
      debug:
        msg:
          - 'Ticket Number: "{{ticket_num}}"'
          - 'Build by: "{{build_by}}"'
          - 'QA by: "{{qa_by}}"'
          - 'Server Type: "{{srv_type}}"'
          - 'Client Name: "{{client_name}}"'
          - 'Monitoring Agent: "{{mon_agt}}"'


# OS QA

    - name: Verify OS configuration (physical server)
      debug:
        msg:
          - 'Hostname: ''{{ansible_hostname}}'''
          - 'Operating System: ''{{ansible_distribution}}'''
          - 'Operating System version: ''{{ansible_distribution_version}}'''
          - 'Server Model: ''{{ansible_product_name}}'''
          - 'Server Serial Number: ''{{ansible_product_serial}}'''
          - 'Kernel Version: "{{ansible_kernel}}"'
          - 'Server Type: Physical'
      when: srv_type == 'physical'
  
    - name: Verify OS configuration (virtual server)
      debug:
        msg:
          - 'Hostname: ''{{ansible_hostname}}'''
          - 'Operating System: ''{{ansible_distribution}}'''
          - 'Operating System version: ''{{ansible_distribution_version}}'''
          - 'Server Type: Virtual'
      when: srv_type == 'virtual'

    - name: Verify BIOS and Firmware (physical server)
      shell: dmidecode -t bios -q | grep Version
      register: result_bios
      when: srv_type == 'physical'

    - debug:
        msg: "{{result_bios.stdout}}" 
      when: srv_type == 'physical'

    - pause:
        prompt: "Are the above displayed OS details correct (please verify from build sheet)? [yes/no]"
        echo: yes
      register: prompt_os_details
    - set_fact:
        os_verification: "{{ prompt_os_details.user_input }}"
    
    - name: Operating System QA Passed  
      debug:
        msg: " PASS "
      when: os_verification|bool  == true
      
    - name: Operating System QA Failed 
      debug:
        msg: " OS QA failed "
      when: os_verification|bool  == false

# Processor QA

    - name: Verify Processor Details (virtual server)
      debug:
        msg:
          - 'vCPU: "{{ansible_processor_vcpus}}"'
          - 'RAM: "{{ansible_memory_mb.real.total}}"'
      when: srv_type == 'virtual'

    - name: Verify Processor Details (physical server)
      debug:
        msg:
          - 'vCPU: "{{ansible_processor_vcpus}}"'
          - 'RAM: "{{ansible_memory_mb.real.total}}"'
      when: srv_type == 'physical'  

    - pause:
        prompt: "Are the above displayed Processor details correct (please verify from build sheet)? [yes/no]"
        echo: yes
      register: prompt_proc_details
    - set_fact:
        proc_verification: "{{ prompt_proc_details.user_input }}"
   
    - name: Processor QA Passed  
      debug:
        msg: " PASS "
      when: proc_verification|bool == true
      
    - name: Processor QA Failed 
      debug:
        msg: " Processor QA failed "
      when: proc_verification|bool == false

# Network configuration QA
    - name: Verify Network configuration
      debug:
        msg:
          - 'IPv4 address: "{{ansible_default_ipv4.address}}"'
          - 'Subnet mask: "{{ansible_default_ipv4.netmask}}"'
          - 'Default Gateway:"{{ansible_default_ipv4.gateway}}"'

    - pause:
        prompt: "Is the above diplayed Network configuration correct (please verify from build sheet)? [yes/no]"
        echo: yes
      register: prompt_nw_details
    - set_fact:
        nw_verification: "{{ prompt_nw_details.user_input }}"
    
    - name: Network configuration QA Passed  
      debug:
        msg: " PASS "
      when: nw_verification|bool == true
      
    - name: Network configuration QA Failed 
      debug:
        msg: " Network QA failed "
      when: nw_verification|bool == false


# Storage QA
    - name: Verify Disk configuration
      shell: lvmdiskscan
      register: result_disk_1

    - debug:
        msg: "{{result_disk_1.stdout}}"

    - name: Verify RAID configuration (physical server)
      shell: hpcaculi
      register: result_disk_2
      when: 
        - srv_type == 'physical'
        - raid_ctrl == 'hp'

    - name: Verify RAID configuration (physical server)
      shell: perccli
      register: result_disk_2
      when: 
        - srv_type == 'physical'
        - raid_ctrl == 'dell'

    - debug:
        msg: "{{result_disk_2.stdout}}"
      when: srv_type == 'physical'

    - name: Verify SAN/NAS multipathing
      shell: multipath -ll
      register: result_disk_3
      when: srv_type == 'physical'

    - debug:
        msg: "{{result_disk_3.stdout}}"
      when: srv_type == 'physical'

    - pause:
        prompt: "Is the above diplayed Storage/Disk configuration correct (please verify from build sheet)? [yes/no]"
        echo: yes
      register: prompt_sto_details
    - set_fact:
        sto_verification: "{{ prompt_sto_details.user_input }}"
    
    - name: Storage/Disk configuration QA Passed  
      debug:
        msg: " PASS "
      when: sto_verification|bool == true
      
    - name: Storage/Disk configuration QA Failed 
      debug:
        msg: " Storage QA failed "
      when: sto_verification|bool == false    

#DNS QA
    - name: Check if CentrifyDC is installed
      yum:
        list: 'CentrifyDC'
      register: yum_cmd
      
    - name: define variable if centrifyDC is not installed
      set_fact:
          ad_info: "Centrify Agent Not Installed"
      when: '"failed" in yum_cmd'


    - name: Verify AD connectivity
      shell: adinfo
      register: result_dns_1
      when: yum_cmd.results | selectattr("yumstate", "match", "installed") | list | length == 1

    - set_fact:
          ad_info: "{{result_dns_1.stdout}}"
      when: yum_cmd.results | selectattr("yumstate", "match", "installed") | list | length == 1
    
    - debug:
        msg: "{{ad_info}}"

    - name: Verify resolv.conf
      shell: cat /etc/resolv.conf
      register: result_dns_2
      
    - debug:
        msg: "{{result_dns_2.stdout}}"

    - pause:
        prompt: "Please enter a domain to check"
        echo: yes
      register: prompt_dns_domain_details
      
    - set_fact:
        dns_domain: "{{ prompt_dns_domain_details.user_input }}"

    - name: NSlookup
      shell: nslookup '{{dns_domain}}'
      ignore_errors: yes
      register: lookup_out
      
    - debug:
        msg: '{{lookup_out.stdout}}'

    - pause:
        prompt: "Are the DNS and AD details accurate for '{{client_name}}' ? [yes/no]"
        echo: yes
      register: prompt_dns_details
    - set_fact:
        dns_verification: "{{ prompt_dns_details.user_input }}"
    
    - name: DNS QA Passed  
      debug:
        msg: " PASS "
      when: dns_verification|bool == true
      
    - name: DNS QA Failed 
      debug:
        msg: " DNS QA failed "
      when: dns_verification|bool == false

#OS registartion QA
    
    - name: Verify OS registartion
      shell: subscription-manager list
      register: result_osr
      when: ansible_distribution == 'Red Hat Enterprise Linux'
    
    - set_fact:
         osr_out: "{{result_osr.stdout}}"
      when: ansible_distribution == 'Red Hat Enterprise Linux'
   
    - debug:
        msg: "{{osr_out}}"
      when: ansible_distribution == 'Red Hat Enterprise Linux'

    - pause:
        prompt: "Is the OS registartion details accurate for '{{client_name}}' ? [yes/no]"
        echo: yes
      register: prompt_osr_details
      when: ansible_distribution == 'Red Hat Enterprise Linux'
    
    - set_fact:
        osr_verification: "{{ prompt_osr_details.user_input }}"
      when: ansible_distribution == 'Red Hat Enterprise Linux'

    - name: OS Registration QA Passed  
      debug:
        msg: " PASS "
      when: 
        - ansible_distribution == 'Red Hat Enterprise Linux'
        - osr_verification|bool == true
        

    - name: OS Registration QA Failed 
      debug:
        msg: " OS Registration QA failed "
      when: 
        - ansible_distribution == 'Red Hat Enterprise Linux'
        - osr_verification|bool == false
    
    - set_fact:
         osr_out: "Host is not a RHEL environment"
         osr_verification: "N/A"
      when: ansible_distribution == 'CentOS'
   
    - debug:
        msg: "{{osr_out}}"
      when: ansible_distribution == 'CentOS'       

#Services QA
    - name: Display NTP details
      shell: timedatectl status
      register: result_ntp_1


    - name: showing NTP details report
      debug:
        msg: '{{result_ntp_1.stdout}}'

    - name: checking NTP service status
      shell: timedatectl status| grep 'NTP enabled'
      register: result_ntp_2


    - name: showing NTP service report
      debug:
        msg: '{{result_ntp_2.stdout}}'

    - name: checking Kdump service status
      shell: systemctl status kdump | grep 'Active'
      ignore_errors: yes
      register: result_kdump


    - name: showing Kdump service report
      debug:
        msg: '{{result_kdump.stdout}}'
      when: "'Active' in result_kdump.stdout"

    - name: Kdump not installed
      debug:
        msg: 'Kdump not installed'
      when: "'' in result_kdump.stdout"

    - name: checking monitoring service status
      shell: systemctl status nqmdaemon | grep Active
      ignore_errors: yes
      register: result_nqm
      when: mon_agt == 'nqm'

    - name: showing monitoring service report
      debug:
        msg: '{{result_nqm.stdout}}'
      when: 
        - mon_agt == 'nqm'
        - "'Active' in result_nqm.stdout"

    - name: NetIQ AppManager not installed
      debug:
        msg: 'NetIQ AppManager not installed'
      when: 
        - mon_agt == 'nqm'
        - "'' in result_nqm.stdout"

    - name: checking monitoring service status
      shell: systemctl status patrolagent | grep Active
      register: result_patrol
      ignore_errors: yes
      when: mon_agt == 'patrol'

    - name: showing monitoring service report
      debug:
        msg: '{{result_patrol.stdout}}'
      when: 
        - mon_agt == 'patrol' 
        - "'Active' in result_patrol.stdout"

    - name: Patrol Agent not installed
      debug:
        msg: 'Patrol Agent not installed'
      when: 
        - mon_agt == 'patrol' 
        - "'' in result_patrol.stdout"    

    - name: checking backup service status
      shell: systemctl status netbackup | grep Active
      ignore_errors: yes
      register: result_bckup

    - name: showing backup service report
      debug:
        msg: '{{result_bckup.stdout}}'
      when: "'Active' in result_bckup.stdout"


    - name: Veritas NetBackup not installed
      debug:
        msg: 'Veritas NetBackup not installed'
      when: "'' in result_bckup.stdout"

    - name: checking DS agent service status
      shell: /etc/init.d/ds_agent status
      ignore_errors: yes
      register: result_ds

    - name: showing DS agent service report
      debug:
        msg: '{{result_ds.stdout}}'
      when: "'Active' in result_ds.stdout"

    - name: DS agent not installed
      debug:
        msg: 'DS agent not installed'
      when: "'' in result_ds.stdout"    

    - name: checking VM tool status
      shell: systemctl status vmtoolsd.service | grep Active
      ignore_errors: yes
      register: result_vmt
      when: srv_type == 'virtual'


    - name: showing VM tool status report
      debug:
        msg: '{{result_vmt.stdout}}'
      when: 
        - srv_type == 'virtual'
        - "'Active' in result_vmt.stdout"

    - name: VMware Tools not installed
      debug:
        msg: 'VMware Tools not installed'
      when: 
        - srv_type == 'virtual'
        - "'' in result_vmt.stdout"

    - pause:
        prompt: "Are all the services installed and are in running state ? [yes/no]"
        echo: yes
      register: prompt_svc_details
    - set_fact:
        svc_verification: "{{ prompt_svc_details.user_input }}"
    
    - name: Service QA Passed  
      debug:
        msg: " PASS "
      when: svc_verification|bool == true
      
    - name: Service QA Failed 
      debug:
        msg: " Service QA failed "
      when: svc_verification|bool == false
      
    - command: "{{ ansible_python_interpreter | default('/usr/bin/python') }} -c 'import {{ module }}; print({{ module }}.__version__)'"
      vars:
        module: openpyxl
      register: test
    - debug:
        var: test.stdout

    - name: execute the script on Ansible Server (patrol agent)
      local_action: command python report.py "{{ansible_hostname}}" "{{ansible_distribution}}" "{{ansible_distribution_version}}" "{{srv_type}}" "{{ansible_processor_vcpus}}" "{{ansible_memory_mb.real.total}}" "{{result_disk_1.stdout}}" "{{ansible_default_ipv4.address}}" "{{ansible_default_ipv4.netmask}}" "{{ansible_default_ipv4.gateway}}" "{{yum_cmd}}" "{{result_ntp_2.stdout}}" "{{mon_agt}}" "{{result_patrol.stdout}}" "{{result_bckup.stdout}}" "{{result_ds.stdout}}" "{{result_vmt.stdout}}" "{{result_kdump.stdout}}" "{{build_by}}" "{{qa_by}}" "{{ticket_num}}" "{{client_name}}" "{{os_verification}}" "{{proc_verification}}" "{{sto_verification}}" "{{nw_verification}}" "{{dns_verification}}" "{{dns_domain}}" "{{ad_info}}" "{{osr_out}}" "{{osr_verification}}"
      ignore_errors: yes
      when: mon_agt == 'patrol'

    - name: execute the script on Ansible Server (nqm agent)
      local_action: command python report.py "{{ansible_hostname}}" "{{ansible_distribution}}" "{{ansible_distribution_version}}" "{{srv_type}}" "{{ansible_processor_vcpus}}" "{{ansible_memory_mb.real.total}}" "{{result_disk_1.stdout}}" "{{ansible_default_ipv4.address}}" "{{ansible_default_ipv4.netmask}}" "{{ansible_default_ipv4.gateway}}" "{{yum_cmd}}" "{{result_ntp_2.stdout}}" "{{mon_agt}}" "{{result_nqm.stdout}}" "{{result_bckup.stdout}}" "{{result_ds.stdout}}" "{{result_vmt.stdout}}" "{{result_kdump.stdout}}" "{{build_by}}" "{{qa_by}}" "{{ticket_num}}" "{{client_name}}" "{{os_verification}}" "{{proc_verification}}" "{{sto_verification}}" "{{nw_verification}}" "{{dns_verification}}" "{{dns_domain}}" "{{ad_info}}" "{{osr_out}}" "{{osr_verification}}"
      ignore_errors: yes
      when: mon_agt == 'nqm'